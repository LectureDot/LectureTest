import{newEl,arrSum,input,getDateTime,arrMean,arrStderr,groupAndSummarize}from"./ui/common.js";import{quizGrader}from"./quizgrader.js";import{drawBar,drawPie,drawScatter}from"./ui/plotting.js";import styles from"./analyze.css"with{type:"css"};document.adoptedStyleSheets.push(styles);const cutoff=input({htmlBefore:"Duration Cutoff (m)",type:"number",value:5,style:{width:"30px"}}),gradeA=input({htmlBefore:"A",type:"number",value:90,style:{width:"30px"}}),gradeB=input({htmlBefore:"B",type:"number",value:80,style:{width:"30px"}}),gradeC=input({htmlBefore:"C",type:"number",value:70,style:{width:"30px"}}),gradeD=input({htmlBefore:"D",type:"number",value:60,style:{width:"30px"}});export function quizAnalyzer(e,t,n,r,a,s=[],o,i){console.log(t),t.answers=n,e.innerHTML="",e.classList.add("bg"),s=s.reduce(((e,t)=>{const{Email:n,...r}=t;return e[n]=r,e}),{});const l=newEl({id:"row0",className:"row",style:{display:"flex",justifyContent:"end"}},e);l.appendChild(cutoff),l.appendChild(gradeA),l.appendChild(gradeB),l.appendChild(gradeC),l.appendChild(gradeD);newEl({id:"dropdownRoot"},l);!function(e){const t=newEl({className:"dropdown-container"},document.getElementById("dropdownRoot")),n=newEl({className:"dropdown-menu"},t);newEl({tag:"button",className:"dropdown-btn",innerHTML:"â˜°",events:{click:e=>{t.classList.toggle("open"),function(e,t){const n=e.getBoundingClientRect();let r=-t.getBoundingClientRect().width+n.width,a=n.height+10;t.style.left=`${r}px`,t.style.top=`${a}px`}(e.target,n)}}},t);e.forEach((e=>{const t=newEl({tag:"label"},n);newEl({tag:"input",type:"checkbox",value:e,checked:"Select None"!=e,events:{click:e=>function(e){"Select All"==e.target.value&&e.target.checked?document.querySelectorAll(".dropdown-menu input").forEach((e=>{e.checked="Select None"!=e.value})):"Select None"==e.target.value&&e.target.checked?document.querySelectorAll(".dropdown-menu input").forEach((e=>{"Select None"!=e.value&&(e.checked=!1)})):document.querySelectorAll(".dropdown-menu input").forEach((e=>{"Select None"!=e.value&&"Select All"!=e.value||(e.checked=!1)}));K(G,B,R,I,{labels:U,data:J,content:W})}(e)}},t),newEl({tag:"span",innerHTML:e},t)}))}(["Select All","Select None"].concat(Object.values(t.questions).map((e=>e.id)))),window.onclick=function(e){e.target.closest(".dropdown-container")||document.querySelectorAll(".dropdown-container").forEach((e=>{e.classList.remove("open")}))};const u=newEl({id:"row1",className:"row"},e),d=newEl({id:"row5",className:"row"},e),c=newEl({id:"row2",className:"row"},e),m=newEl({id:"row3",className:"row"},e),p=newEl({id:"row4",className:"row"},e),h=newEl({id:"row6",className:"row"},e),g=newEl({id:"row7",className:"row"},e),y=newEl({id:"row8",className:"row"},e),w=newEl({id:"row9",className:"row"},e),f=newEl({id:"qType",className:"qtype",innerHTML:"Question Type Distribution"},u),b=newEl({id:"qTime",className:"qtype",innerHTML:"Quiz Summary"},u),q=newEl({id:"qTimePerType",className:"qtype",innerHTML:"Time Per Question Type"},c),v=newEl({id:"qTimePerQ",className:"qtype",innerHTML:"Time Per Question #"},c),M=newEl({id:"qOrderPerType",className:"qtype",innerHTML:"Order Per Question Type"},m),S=newEl({id:"qOrderPerQ",className:"qtype",innerHTML:"Order Per Question #"},m),T=newEl({id:"qAccuracyPerType",className:"qtype",innerHTML:"Points Per Question Type"},p),E=newEl({id:"qAccuracyPerQ",className:"qtype",innerHTML:"Accuracy Per Question #"},p),O=newEl({id:"gradeDist",className:"qtype",innerHTML:"Grade Distribution"},d),N=newEl({id:"dist",className:"qtype",innerHTML:"Grade Distribution"},d),$=newEl({id:"qMissing",className:"qtype",innerHTML:"Missing Responses"},h),j=newEl({id:"uMissing",className:"qtype",innerHTML:"Missing Grades"},h),k=newEl({id:"absent",className:"qtype",innerHTML:"Score vs Absense"},g),A=newEl({id:"late",className:"qtype",innerHTML:"Score vs Lateness"},g),Q=newEl({id:"tradeoff",className:"qtype",innerHTML:"Score vs Lateness"},y),L=newEl({id:"test",className:"report",innerHTML:"Report"},w),x=Object.values(r).map((e=>e.email)).reduce(((e,t)=>(e[t]=(e[t]||0)+1,e)),{}),B=Object.values(x).filter((e=>e>1)).length,F=Object.fromEntries(Object.entries(r).filter((([e,t])=>t.duration/1e3/60>=(Number(cutoff.input.value)||5))));delete F._;const D=Object.fromEntries(Object.entries(r).filter((([e,t])=>Object.values(F).reduce(((e,{email:t})=>(t&&(e[t]=(e[t]||0)+1),e)),{})[t.email]>1))),P=Object.values(D).reduce(((e,t)=>((!e[t.email]||t.duration<e[t.email].duration)&&(e[t.email]=t),e)),{});Object.entries(D).filter((([,e])=>e!==P[e.email])).map((([e])=>e)).forEach((e=>delete F[e]));let C=[],H=[];Object.values(F).map((e=>{C.push(e.duration/1e3/60),H.push(e.email)}));const G={durations:C,emails:H},z=AggregateQuizResults(F,t,n,a,s),R=z.agg,I=z.scores;console.log("qAggregation:",z),console.log(F,t,n,a,s,G);var U=[],J=[],W=[],_=0;function K(e,n,r,a,s){clearAllGraphs(),r=JSON.parse(JSON.stringify(r)),a=JSON.parse(JSON.stringify(a)),r=r.sort(((e,t)=>parseInt(e.qnum.replace(/\D/g,""),10)-parseInt(t.qnum.replace(/\D/g,""),10)));const o=Array.from(document.querySelectorAll(".dropdown-menu input:checked")).map((e=>e.value));let i=getScore(r=r.filter((e=>o.includes(e.qnum)?e:"")));Object.keys(a).map((e=>{a[e].score=i[e]}));const l=arrSum(r.map((e=>e.worth)));let u=r.reduce(((e,t)=>(e.map[t.category]||(e.map[t.category]={data:0,content:[]},e.labels.push(t.category)),e.map[t.category].data+=1,e.map[t.category].content.push(t.qnum),e)),{labels:[],map:{}});function d(e){if(!e||"object"!=typeof e||0===Object.keys(e).length)return{};const t=Object.keys(e),n=Object.keys(e[t[0]]);return{keys:t,...n.reduce(((n,r)=>(n[r]=t.map((t=>e[t][r])),n)),{})}}u={labels:u.labels,data:u.labels.map((e=>u.map[e].data)),content:u.labels.map((e=>u.map[e].content))};const c=d(r),m=d(a),p=e.durations.length,h=getGradeCounts(a,l),g=Object.fromEntries(Object.values(t.questions).map((e=>[e.id,e.points])));var{labels:y,data:w,content:x}=groupAndSummarize(r,{groupBy:"qnum",valuesField:"points",labelField:"emails",sortBy:"qnum"});const B={labels:y,data:w.map(((e,t)=>e.map((e=>e/g[y[t]])))),content:x},D=new Set(e.emails);y=[],w=[],x=[];var P=[];c&&c.points&&c.emails&&c.points.map(((e,t)=>{w[t]=0,x[t]=[],P[t]=[],e.forEach(((e,n)=>{null===e?P[t].push(c.emails[t][n]):w[t]+=1})),y[t]=c.qnum[t],w[t]=[p-w[t]-P[t].length],x[t]=x[t].concat([...D].filter((e=>!c.emails[t].includes(e))))}));const C={labels:y,data:w,content:x},H={labels:y,data:P.map((e=>e.length)),content:P},G=Object.entries(a).filter((([e,t])=>void 0!==t.score)).map((([e,t])=>({label:e,x:100*t.score/l,y:(Number(t.Absent)||0)+(Number(t.AbsentLab)||0)+(Number(t.Late)||0)+(Number(t.LateLab)||0)}))),z=Object.entries(a).filter((([e,t])=>void 0!==t.score)).map((([e,t])=>({label:e,x:100*t.score/l,y:(Number(t.Late)||0)+(Number(t.LateLab)||0)})));drawPie(f,u,"Question Type Distribution"),drawBar(b,{labels:["Duration (m)","Score","# Questions","Total Points","Good Submissions","Duplicates","Missing Gradesheets"],data:[e.durations,m&&m.score?m.score.map((e=>100*e/l)):[],[Object.keys(r).length],[l],[p],[n],[s.data.filter((e=>0!==e)).length]],content:[e.emails,m.keys,[],[],[...D],[],s.content.filter(((e,t)=>0!==s.data[t]?e:""))]},t,"Quiz Summary","","",p,!1),drawPie(O,h,"Grade Distribution"),drawBar(N,h,t,"Grade Distribution","Grade","Frequency",p,!1),drawBar(q,groupAndSummarize(r,{groupBy:"category",valuesField:"times",labelField:"emails",sortBy:"qnum"}),t,"Time Per Question Type","Question Type","Duration (m)",p,!1),drawBar(v,groupAndSummarize(r,{groupBy:"qnum",valuesField:"times",labelField:"emails",sortBy:"qnum"}),t,"Time Per Question #","Question #","Duration (m)",p,!0),drawBar(M,groupAndSummarize(r,{groupBy:"category",valuesField:"orders",labelField:"emails",sortBy:"qnum"}),t,"Order Per Question Type","Question Type","Order #",p,!1),drawBar(S,groupAndSummarize(r,{groupBy:"qnum",valuesField:"orders",labelField:"emails",sortBy:"qnum"}),t,"Order Per Question #","Question #","Order #",p,!0),drawBar(T,groupAndSummarize(r,{groupBy:"category",valuesField:"points",labelField:"emails",sortBy:"qnum"}),t,"Accuracy Per Question Type","Question Type","Accuracy",p,!0),drawBar(E,B,t,"Accuracy Per Question #","Question #","Accuracy",p,!0),drawBar($,C,t,"Missing Responses","Question #","# Missing",p,!1),drawBar(j,H,t,"Ungraded Questions","Question #","# Questions not Graded",p,!1),drawScatter(k,G,"Grade vs Absense","Grade","Times Absent"),drawScatter(A,z,"Grade vs Lateness","Grade","Times Late"),drawScatter(Q,e.durations.map(((t,n)=>({label:e.emails[n],x:100*a[e.emails[n]].score/l,y:t}))),"Grade vs Duration","Grade","Duration (m)",p),drawReport(L,t,F,e,h,p,r,a,C,s,H)}Object.keys(r).forEach((e=>{const n=r[e];var s=a?a[e]:void 0;U.push(_),_+=1,J.push(t.questions.length-(s?Object.keys(s).length:0)),W.push([n.email])})),K(G,B,R,I,{labels:U,data:J,content:W}),document.querySelectorAll('input[type="number"]').forEach((e=>{e.addEventListener("change",(()=>{console.log(e),K(G,B,R,I,{labels:U,data:J,content:W})}))}))}function getQuestionsDurations(e,t){if(!e||!t?.questions)return[];const n=[...Object.entries(e).map((([e,t])=>({key:e,time:t.s})))].sort(((e,t)=>e.time-t.time));if(0===n.length)return[];const r=n.slice(1).map(((e,r)=>{const a=e.key,s=t.questions.find((e=>e.id===a));return{key:a,time:e.time-n[r].time,category:s?.category||"Unknown",order:r+2}})),a=n[0].key,s=t.questions.find((e=>e.id===a));return[{key:a,time:n[0].time,category:s?.category||"Unknown",order:1},...r]}function getScore(e){let t={};return e.forEach(((n,r)=>{let a=e[r];a.emails.forEach(((e,n)=>{t[e]=(t[e]||0)+a.points[n]}))})),t}function getGradeCounts(e,t){const n=Object.keys(e).map((n=>{const r=100*e[n].score/t;return{grade:r>=gradeA.input.value?"A":r>=gradeB.input.value?"B":r>=gradeC.input.value?"C":r>=gradeD.input.value?"D":r>=50?"50+":"<50",email:n}})),r=groupAndSummarize(n,{groupBy:"grade",valuesField:"grade",labelField:"email"});return{labels:r.labels,data:r.data.map((e=>e.length)),content:r.content}}function AggregateQuizResults(e,t,n,r,a){const s={};Object.keys(a).forEach((t=>{Object.values(e).find((e=>e.email===t))||delete a[t]})),Object.keys(e).forEach((async o=>{const i=e[o],l=getQuestionsDurations(i.answers,t);var u=r?r[o]:void 0;u||(u=await quizGrader(null,t,n,i,{},(e=>e),null)),a[i.email]||(a[i.email]={}),a[i.email].gradeSheet=u,l.forEach((e=>{s[e.key]||(s[e.key]={times:[],orders:[],points:[],emails:[]}),s[e.key].times.push(Number((e.time/60).toFixed(2))),s[e.key].orders.push(e.order),s[e.key].points.push(u[e.key]),s[e.key].emails.push(i.email)}))}));return{agg:Object.keys(s).map((e=>({qnum:e,times:s[e].times,orders:s[e].orders,points:s[e].points,emails:s[e].emails,category:t.questions.find((t=>t.id===e))?.category||"Unknown",worth:t.questions.find((t=>t.id===e))?.points||"Unknown"}))),scores:a}}function clearAllGraphs(){document.querySelectorAll("canvas").forEach((e=>{e.remove()})),document.querySelectorAll(".toggle-container").forEach((e=>{e.remove()}))}function drawReport(e,t,n,r,a,s,o,i,l,u,d){if(!e)return;if(e.innerHTML="",!i||0===Object.keys(i).length)return void(e.innerHTML="<p>No data available to generate the report.</p>");if(!o||0===o.length)return void(e.innerHTML="<p>No question summary data available to generate the report.</p>");if(Object.keys(i).length<2)return void(e.innerHTML="<p>Not enough data to generate a meaningful report. Please ensure there are at least 2 unique submissions.</p>");const c=arrSum(o.map((e=>e.worth))),m=Object.fromEntries(Object.values(t.questions).map((e=>[e.id,e.points])));const p=o.filter((e=>e.orders&&e.orders.length>0)),h=function(e){const t=arrMean(e),n=e.reduce(((e,n)=>e+Math.pow(n-t,2)),0)/e.length;return Math.sqrt(n)}(p.map((e=>arrMean(e.orders)-parseInt(e.qnum.replace("q",""))))),g=p.filter((e=>arrMean(e.orders)-parseInt(e.qnum.replace("q",""))<-1.25*h)),y=p.filter((e=>arrMean(e.orders)-parseInt(e.qnum.replace("q",""))>1.25*h)),w=e=>e.sort(((e,t)=>arrMean(e.orders)-arrMean(t.orders))).map((e=>{const t=arrMean(e.orders);return`<li>${e.qnum} (${e.category}) - Average Order: ${t.toFixed(2)}</li>`})).join(""),f=`\n    <h1>Report</h1>\n    This report provides a comprehensive analysis of the results of the ${t.title}. \n    The test consisted of ${o.length} questions.\n    The total number of points possible was ${arrSum(o.map((e=>e.worth)))}.\n    There were ${o.filter((e=>"MCQ"===e.category)).length} Multiple Choice question(s), \n    ${o.filter((e=>"OEQ"===e.category)).length} Short Answer question(s),\n    ${o.filter((e=>"PARSONS"===e.category)).length} Parsons Problem(s), and\n    ${o.filter((e=>"CODE"===e.category)).length} Code Writing question(s).\n    The questions were presented in ${"ORD"==t.category?"the same order for all":"random order to the"} students.\n    The exam was administered on ${[...(e=>{if(!e||"object"!=typeof e)return[];const t=Object.values(e).map((e=>e&&e.d&&e.d.seconds?getDateTime(1e3*e.d.seconds)[0]:null)).filter((e=>null!==e));return new Set(t)})(n)].join(", ")}.\n    There were ${Object.keys(n).length} valid submissions after filtering out duplicates and those with durations less than 5 minutes.\n    <hr>\n    <h2>Time to Complete</h2>\n    On average, it took students ${arrMean(r.durations).toFixed(2)} minutes to complete the quiz, with a standard deviation of ${arrStderr(r.durations).toFixed(2)} minutes.\n    The fastest student took ${Math.min(...r.durations).toFixed(2)} minutes, while the slowest took ${Math.max(...r.durations).toFixed(2)} minutes.\n    On average, students took ${arrMean(o.map((e=>arrMean(e.times)))).toFixed(2)} minutes per question, with a standard deviation of ${arrStderr(o.map((e=>arrMean(e.times)))).toFixed(2)} minutes.\n    Multiple Choice questions took ${arrMean(o.filter((e=>"MCQ"===e.category)).map((e=>arrMean(e.times)))).toFixed(2)} (SD = ${arrStderr(o.filter((e=>"MCQ"===e.category)).map((e=>arrMean(e.times)))).toFixed(2)}) minutes,\n    the short answer questions took ${arrMean(o.filter((e=>"OEQ"===e.category)).map((e=>arrMean(e.times)))).toFixed(2)} (SD = ${arrStderr(o.filter((e=>"OEQ"===e.category)).map((e=>arrMean(e.times)))).toFixed(2)}) minutes,\n    the code question took on average ${arrMean(o.filter((e=>"CODE"===e.category)).map((e=>arrMean(e.times)))).toFixed(2)} (SD = ${arrStderr(o.filter((e=>"CODE"===e.category)).map((e=>arrMean(e.times)))).toFixed(2)}) minutes, \n    and the parsons problem took ${arrMean(o.filter((e=>"PARSONS"===e.category)).map((e=>arrMean(e.times)))).toFixed(2)} (SD = ${arrStderr(o.filter((e=>"PARSONS"===e.category)).map((e=>arrMean(e.times)))).toFixed(2)}) minutes to complete.\n    <p>\n    The five most time-consuming questions were:\n    <ol>\n      ${o.sort(((e,t)=>arrMean(t.times)-arrMean(e.times))).slice(0,5).map(((e,t)=>`<li>${e.qnum} (${e.category}) - ${arrMean(e.times).toFixed(2)} minutes</li>`)).join("")}\n    </ol>\n    <hr>\n    <h2>Score</h2>\n    <p>\n    The average score across all valid submissions was \n    ${arrMean(Object.values(i).filter((e=>void 0!==e.score)).map((e=>100*e.score/c))).toFixed(2)}% \n    with a standard deviation of  ${arrStderr(Object.values(i).filter((e=>void 0!==e.score)).map((e=>100*e.score/c))).toFixed(2)}%.\n    <p>\n    The grade distribution was as follows:\n    <ul>\n      ${a.labels.map(((e,t)=>{const n=a.data[t];return`<li>${e}: ${n} (${(n/s*100).toFixed(2)}%)</li>`})).join("")}\n    </ul>\n    <p>\n    The five most difficult questions (i.e., those with the lowest average score) were:\n    <ol>  \n      ${o.sort(((e,t)=>arrMean(e.points)/m[e.qnum]-arrMean(t.points)/m[t.qnum])).slice(0,5).map(((e,t)=>{const n=(arrMean(e.points)/m[e.qnum]*100).toFixed(2);return`<li>${e.qnum} (${e.category}) - ${n}%</li>`})).join("")}\n    </ol>\n    <hr>\n    <h2>Question Order</h2>\n    <p>\n    Students attempted the following questions later than they were initially presented \n    (i.e., they were attempted out of order). This may indicate that students were struggling with these questions:\n    <ol>\n      ${w(y)}\n    </ol>  \n    The following questions were attempted earlier than their actual position. This may indicate that students found these questions easier:  \n    <ol>\n      ${w(g)}\n    </ol>    \n    <hr>\n    <h2>Missing Question Responses</h2>\n    The following questions had missing responses from students. These questions were either not attempted or were left blank:\n    <ul>\n      ${l.labels.length>0?l.labels.map(((e,t)=>{const n=l.data[t];return n>0?`<li>${e} - ${n} (${(n/s*100).toFixed(2)}% of students)</li>`:""})).filter((e=>e)).join(""):"<li>No missing responses</li>"}\n    </ul>\n    The following are the emails of students who had missing responses for the questions above:\n    <ul>\n      ${l.content.length>0?l.content.map(((e,t)=>e.length>0?`<li>${l.labels[t]}: ${e.join(", ")}</li>`:"")).filter((e=>e)).join(""):"<li>No missing responses</li>"}\n    </ul>\n    <hr>\n    \n    <h2>Missing GradeSheets (Requires Instructor Review)</h2>\n    The following are the emails of students who had no gradesheets and were autograded:\n    <ul>\n      ${u&&u.content.length>0?u.data.map(((e,t)=>e>0?`<span style="color: red;"><li> ${u.content[t].join(", ")} </li></span>`:"")).filter((e=>e)).join(""):"<li>No missing gradesheets</li>"}\n    </ul>\n    The following are questions for which the student provided an answer but the \n    autograder flagged them for review because they were not exact matches to the \n    test answer or the test answer was missing:\n    <ul>\n      ${d&&d.content.length>0?d.content.map(((e,t)=>e.length>0?`<span style="color: red;"><li>${d.labels[t]}: ${e.join(", ")}</li></span>`:"")).filter((e=>e)).join(""):"<li>No questions with missing gradesheets</li>"}\n    </ul>\n    `;e.innerHTML=f}