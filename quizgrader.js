import{isArr,isStr,span,input,copyToClipboard,newEl,button,isNum}from"./ui/common.js";import{showQuestion}from"./showQuestions.js";import{popup}from"./ui/popup.js";import{grid}from"./ui/grid.js";import{reindent}from"./indentation.js";import{F}from"./schema.js";import{run as runPython,unitTest as pyUnitTest}from"./util/pyodide.js";import{compareText}from"./util/compareText.js";import{haveSameMembers}from"./util/utils.js";import{runUnitTest}from"./util/unitTest.js";export async function quizGrader(e,i,s,n,t){const o=n.answers,a=await checkAnswers(i,s,o),r={},c={...t};var d,l;if(e&&(e.innerHTML="",newEl({innerHTML:"Exam Duration:"+(n.duration/6e4).toFixed(1)+"min",className:"score"},e),newEl({innerHTML:"Auto Score:"+checkScore(i,a),className:"score"},e),d=newEl({innerHTML:"Final Score:"+checkScore(i,a),className:"score"},e),l=grid(["QID","Category","Worth","Prompt","Correct Answer","Submission","AutoGrader","Points"],[],{className:"submission-table"},e)),(i.questions||[]).forEach(((i,n)=>{r[i.id]="check"===a[i.id]?void 0:(i.points||1)*(!0===a[i.id]),t[i.id]=t[i.id]??r[i.id];let p=i.points;const u=span({id:i.id,style:{display:"flex",flexDirection:"column",minHeight:"50px"}}),m=input({type:"number",style:{width:"40px",color:t[i.id]===r[i.id]?"black":"purple",border:void 0===t[i.id]?"3px solid red":""},min:0,value:t[i.id],events:{change:e=>{let s=e.target.value;e.target.style.color=Number(s)>p?"red":s==r[i.id]?"black":"purple",t[i.id]=""==s?void 0:Number(s),d.innerHTML="Final Score:"+Object.values(t).reduce(((e,i)=>e+(i||0)),0),e.target.value!=c[i.id]?m.classList.add("question-changed"):m.classList.remove("question-changed")}}},u);t[i.id]!=c[i.id]&&m.classList.add("question-changed");const f=newEl({style:{alignItems:"center"}},u);if(newEl({tag:"i",className:"icon-btn fa-solid fa-check grayscale",events:{click:e=>{m.input.value=Number(p),m.input.dispatchEvent(new Event("change"))}}},f),newEl({tag:"i",className:"icon-btn fa-solid fa-xmark grayscale",events:{click:e=>{m.input.value=0,m.input.dispatchEvent(new Event("change"))}}},f),e){const e=newEl({class:"grader-student-answer"}),t=isArr(o[i.id]?.a)?o[i.id].a.join("\n"):o[i.id]?.a||"";span({innerText:t,onclick:e=>copyToClipboard(e.target.innerText)},e),"python"==i.language&&button({innerText:"▶",class:"small",onclick:e=>{console.log(`code: ${t};;`);const i=popup("","","","Dismiss");i.main.className="code-output",runPython(t,i.main),console.log(i.main)}},e),o[i.id]?.out&&o[i.id].out.forEach(((s,n)=>{span({innerText:s},e),o[i.id]?.passed&&span({innerText:o[i.id].passed[n]?"✔️ Unit test passed.":"❌ Unit test failed.",class:"small"},e)})),l.addRow([i.id,i.category,(i.points||1).toFixed(1),span({innerHTML:i.prompt,events:{click:e=>{let n=popup("","",null,"Dismiss");showQuestion(n.main,i,i.id,c,s[i.id])}}}),span({innerHTML:null==s[i.id]?"":s[i.id].map((e=>`<div style='border-bottom:solid 1px gray'>${e.A?e.A.map((e=>isStr(e)?e:JSON.stringify(e,null,2))).join("\n"):!1===e?"<span style='color:purple;font-size:10px'>Need to check...</span>":isStr(e)?e:JSON.stringify(e,null,2)}</div>`)).join(""),style:{color:"green",whiteSpace:"pre",fontFamily:"monospace"}}),e,!0===a[i.id]?'<i class="icon-btn fa-solid fa-check"></i>':!1===a[i.id]?'<i class="icon-btn fa-solid fa-xmark"></i>':null===a[i.id]?'<i class="icon-btn fa-solid fa-minus"></i>':'<i class="icon-btn fa-solid fa-circle-exclamation"></i>',u],{id:n})}})),e&&l.sort(7,!1),!e)return t}export async function checkAnswers(e,i,s){const n={};for(let t of e[F.EXAM_QUESTIONS]||[])if(n[t.id]=null,s&&s[t.id]?.a&&(!isArr(s[t.id].a)||s[t.id].a.length)){if(i[t.id]&&isArr(i[t.id])&&i[t.id].length)if("MCQ"==t.category)n[t.id]=i[t.id].includes(s[t.id].a);else if("MRQ"==t.category)n[t.id]=i[t.id].some((e=>{if(e)return haveSameMembers(e.A||[e],s[t.id].a)}));else if("OEQ"==t.category)n[t.id]=i[t.id].some((e=>{if(!e)return;return(e.A||[e]).every((e=>compareText(s[t.id].a,e,{ignoreCase:!t.case_sensitive,removeNewlines:!t.space_sensitive,removeEmptyLines:!t.space_sensitive,reduceWhitespace:!t.space_sensitive,trim:!t.space_sensitive,standardizeIndent:!1})))}));else if("CODE"==t.category){s[t.id].out=[],s[t.id].passed=[];for(let e of i[t.id]){if(!e)continue;const i=e.A||[e];let o=0;for(let e of i)if(e.run){if("py"!==e.run){n[t.id]="check";break}const{output:i,passed:a}=await runUnitTest(s[t.id].a,e,!t.case_sensitive,!t.space_sensitive);s[t.id].out.push(i),s[t.id].passed.push(a),a&&o++}else{compareText(s[t.id].a,e,{ignoreCase:!t.case_sensitive,removeNewlines:!1,removeEmptyLines:!0,reduceWhitespace:!t.space_sensitive,trim:!1,standardizeIndent:!0})&&o++}if(o===i.length&&(n[t.id]=!0),n[t.id])break}}else"PARSONS"==t.category&&(n[t.id]=i[t.id].some((e=>{if(e)return e.A&&(e=e.A.join("\n")),reindent(e)==reindent(s[t.id].a.join("\n"))})));else n[t.id]="check";n[t.id]||(n[t.id]=!!i[t.id].includes(!1)&&"check")}return n}export function checkScore(e,i){let s=0;return(e.questions||[]).forEach((e=>{let n=e?.points||1;1==i[e.id]&&(s+=n)})),s}export async function makeGradesheet(e,i,s){const n=await checkAnswers(e,i,s[F.SUBMISSION_ANSWERS]),t={};for(let i in n)"check"!==n[i]&&(t[i]=!0===n[i]?e[F.EXAM_QUESTIONS].find((e=>e[F.EXAM_QUESTION_ID]===i)).points||1:0);return t}