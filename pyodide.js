import"https://cdn.jsdelivr.net/pyodide/v0.28.2/full/pyodide.js";const styleElement=document.createElement("style");var pythonKernel;async function initPyodide(){if(!pythonKernel)try{pythonKernel=await loadPyodide()}catch(n){return console.error(n),!1}return clearGlobalNamespace(),!0}function clearGlobalNamespace(){pythonKernel.runPython("\n    globals_to_keep = {'__name__', '__doc__', '__package__', '__loader__', '__spec__', '__annotations__', '__builtins__', '_pyodide_core'}\n    user_globals = [name for name in globals() if name not in globals_to_keep]\n    for name in user_globals:\n        del globals()[name]\n    del name\n    del user_globals\n  ")}function createStdio(n,e="error-msg",t="warning-msg"){const a=e=>{const t=document.createElement("div");return t.textContent=e,n.appendChild(t),n.scrollTop=n.scrollHeight,t};return{stdOut:a,stdIn:async e=>new Promise((t=>{const a=document.createElement("div");n.appendChild(a),a.textContent=e||"";const i=document.createElement("span");i.classList.add("input-span"),i.setAttribute("contenteditable","true"),a.appendChild(i),i.focus(),i.addEventListener("keypress",(n=>{"Enter"===n.key&&(n.preventDefault(),i.removeAttribute("contenteditable"),t(i.innerText))})),n.scrollTop=n.scrollHeight})),showWarning:n=>{console.warn(n);a("⚠️ "+n).className=t},showError:n=>{console.error(n);a("❗ "+n).className=e}}}function pythonError(n){const e=(n=n.toString()).split("\n"),t=[e[0]];let a=!1;for(let n of e.slice(1))n.trimLeft().startsWith("File ")&&!n.includes("pyodide")&&(a=!0),a&&t.push(n);return t.join("\n")}function wrapAwaitInput(n){return n.replace(/\bawait input\((("(?:[^"\\]|\\.)*")|('(?:[^'\\]|\\.)*')|('''(?:[^']|'[^']|''[^'])*''')|("""(?:[^"]|"[^"]|""[^"])*""")|[^)]*)\)/g,((n,e,t,a,i,o)=>`(await input(${e||t||a||i||o}))`))}function replaceInputCalls(n){console.log(n);const e=(n=n.replace(/\\\n/g,"")).split("\n");return wrapAwaitInput(n=e.map((n=>n.replace(/\binput\s*\(/g,"await input(").replace(/\bawait\s+await input\(/g,"await input("))).join("\n"))}function checkInputUse(n){const e=/\binput\s*=(?!=)/g,t=/^\s*def\s+\w+\s*\([^)]*\binput\b[^)]*\)/gm,a=/^\s*def\s+input\s*\(/gm,i=/^\s*class\s+input\s*(?:\(|:)/gm,o=/\blambda\s+\binput\b/g;let r=[];return n.match(e)&&r.push("Potential `input` function reassignment found.\n Reassigning built-in functions can cause unexpected behavior."),n.match(t)&&r.push("The name `input` is being used as a function argument in a `def` statement.\n This will shadow the built-in `input` function inside the function scope."),n.match(a)&&r.push("A custom function named `input` is being defined.\n This will overwrite the built-in `input` function."),n.match(i)&&r.push("A custom class named `input` is being defined.\n This will overwrite the built-in `input` function."),n.match(o)&&r.push("The name `input` is being used as a parameter in a `lambda` expression.\n This will shadow the built-in `input` function."),r}styleElement.textContent="\n  .input-span {\n      border: 1px solid #ccc;\n      padding: 1px 0.5em;\n      min-width: 5em;\n      min-height: 1em;\n      display: inline-block;\n      white-space: nowrap;\n      overflow: hidden;\n      vertical-align: bottom;\n  }\n  .error-msg {\n      color: orange;\n  }\n  .warning-msg {\n      color: orange;\n  }\n",document.head.appendChild(styleElement);export const installPackage=async function(n,e=!0){if(!await initPyodide())return;await pythonKernel.loadPackage("micropip");const t=e?stdOut:console.log,a=pythonKernel.pyimport("micropip");t(`Loading ${n}...`);try{return await a.install(n),t(`✅ ${n} installed.`),!0}catch(e){console.error(e),t(`❗Error installing ${n}.`),t("  Please make sure you entered a correct package name."),t("  See https://pyodide.org/en/stable/usage/packages-in-pyodide.html for a list of available packages.")}return!0};export const promptToInstallPackages=async function(){if(await initPyodide())return await pythonKernel.loadPackage("micropip"),await run("\n    import micropip, js\n    print('=== PACKAGE INSTALLATION ===')\n    print('Common packages include: numpy, pandas, scikitlearn')\n    print('See https://pyodide.org/en/stable/usage/packages-in-pyodide.html for a list of available packages compiled for this python environment. Packages that are not on this list may be installable, so feel free to try them out.')\n    packages = input('Which package(s) do you want to install? ')\n    packages = packages.replace(',',' ').split()\n    if packages:\n      for package in packages:\n        await js.window._installPyodidePackage(package)\n      print('Done.')\n    else:\n      print('No packages were installed.')\n  ")};export const run=async function(n,e,t={addAwaitToEveryInput:!0,filename:"main.py"}){if(!await initPyodide())return;e.innerHTML="";const{stdOut:a,stdIn:i,showWarning:o,showError:r}=createStdio(e,t.errClass,t.warnClass);pythonKernel.setStdout({batched:a}),pythonKernel.globals.set("input",i),t.addAwaitToEveryInput&&checkInputUse(n=replaceInputCalls(n)).forEach((n=>o("WARNING: "+n)));try{await pythonKernel.runPythonAsync(`${n}`,{filename:t.filename||"main.py"})}catch(n){r(pythonError(n))}return!0};export const unitTest=async function(n,e,t){if(!await initPyodide())return;var a="";pythonKernel.setStdout({batched:n=>a+=n+"\n"}),e=e||"";let i=0;const o=()=>e[i++];pythonKernel.setStdin({read:n=>{let e=o();return e?(a+=e,n[0]=e.charCodeAt(0),1):0}}),pythonKernel.globals.set("input",(n=>{n&&(a+=n);let e="",t=o();for(;t&&"\n"!=t;)e+=t||"",t=o();return a+=e+"\n",e}));try{await pythonKernel.runPythonAsync(`${n}`),t&&await pythonKernel.runPythonAsync(`${t}`)}catch(n){a+=pythonError(n)}return a};window.run=run,window.unitTest=unitTest;