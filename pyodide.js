import"https://cdn.jsdelivr.net/pyodide/v0.28.2/full/pyodide.js";const styleElement=document.createElement("style");styleElement.textContent="\n  .input-span {\n      border: 1px solid #ccc;\n      padding: 1px 0.5em;\n      min-width: 5em;\n      min-height: 1em;\n      display: inline-block;\n      white-space: nowrap;\n      overflow: hidden;\n      vertical-align: bottom;\n  }\n  .error-msg {\n      color: #c55;\n  }\n  .warning-msg {\n      color: orange;\n  }\n",document.head.appendChild(styleElement);export default async function(e,n={}){n.filename||(n.filename="main.py");const t=n=>{const t=document.createElement("div");return t.textContent=n,e.appendChild(t),e.scrollTop=e.scrollHeight,t},a=async n=>new Promise((t=>{const a=document.createElement("div");e.appendChild(a),a.textContent=n;const i=document.createElement("span");i.classList.add("input-span"),i.setAttribute("contenteditable","true"),a.appendChild(i),i.focus(),i.addEventListener("keypress",(e=>{"Enter"===e.key&&(e.preventDefault(),i.removeAttribute("contenteditable"),t(i.innerText))})),e.scrollTop=e.scrollHeight})),i=e=>{console.warn(e);t("⚠️ "+e).className="warning-msg"};return n.addAwaitToEveryInput=!0,window._installPyodidePackage=async function(e,a=!0){await n.kernel.loadPackage("micropip");const i=a?t:console.log,s=n.kernel.pyimport("micropip");i(`Loading ${e}...`);try{return await s.install(e),i(`✅ ${e} installed.`),!0}catch(n){console.error(n),i(`❗Error installing ${e}.`),i("  Please make sure you entered a correct package name."),i("  See https://pyodide.org/en/stable/usage/packages-in-pyodide.html for a list of available packages.")}},n.promptToInstallPackages=async function(){return await n.kernel.loadPackage("micropip"),await n.run("\n      import micropip, js\n      print('=== PACKAGE INSTALLATION ===')\n      print('Common packages include: numpy, pandas, scikitlearn')\n      print('See https://pyodide.org/en/stable/usage/packages-in-pyodide.html for a list of available packages compiled for this python environment. Packages that are not on this list may be installable, so feel free to try them out.')\n      packages = input('Which package(s) do you want to install? ')\n      packages = packages.replace(',',' ').split()\n      if packages:\n        for package in packages:\n          await js.window._installPyodidePackage(package)\n        print('Done.')\n      else:\n        print('No packages were installed.')\n    ")},n.kernel=await loadPyodide(),n.kernel.setStdout({batched:t}),n.run=async function(s){e.innerHTML="",n.kernel.globals.set("input",a),n.addAwaitToEveryInput&&function(e){const n=/\binput\s*=(?!=)/g,t=/^\s*def\s+\w+\s*\([^)]*\binput\b[^)]*\)/gm,a=/^\s*def\s+input\s*\(/gm,s=/^\s*class\s+input\s*(?:\(|:)/gm,o=/\blambda\s+\binput\b/g;let l=[];e.match(n)&&l.push("Potential `input` function reassignment found.\n Reassigning built-in functions can cause unexpected behavior."),e.match(t)&&l.push("The name `input` is being used as a function argument in a `def` statement.\n This will shadow the built-in `input` function inside the function scope."),e.match(a)&&l.push("A custom function named `input` is being defined.\n This will overwrite the built-in `input` function."),e.match(s)&&l.push("A custom class named `input` is being defined.\n This will overwrite the built-in `input` function."),e.match(o)&&l.push("The name `input` is being used as a parameter in a `lambda` expression.\n This will shadow the built-in `input` function.");for(let e of l)i("WARNING: "+e)}(s=function(e){console.log(e);const n=(e=e.replace(/\\\n/g,"")).split("\n");return function(e){return e.replace(/\bawait input\((("(?:[^"\\]|\\.)*")|('(?:[^'\\]|\\.)*')|('''(?:[^']|'[^']|''[^'])*''')|("""(?:[^"]|"[^"]|""[^"])*""")|[^)]*)\)/g,((e,n,t,a,i,s)=>`(await input(${n||t||a||i||s}))`))}(e=n.map((e=>e.replace(/\binput\s*\(/g,"await input(").replace(/\bawait\s+await input\(/g,"await input("))).join("\n"))}(s));try{await n.kernel.runPythonAsync(`${s}`,{filename:n.filename})}catch(e){const n=(e=e.toString()).split("\n"),a=[n[0]];let i=!1;for(let e of n.slice(1))e.trimLeft().startsWith("File ")&&!e.includes("pyodide")&&(i=!0),i&&a.push(e);o=a.join("\n"),console.error(o),t("❗ "+o).className="error-msg"}var o;n.kernel.runPython("\n      # Clear all user-defined global variables\n      import builtins\n      globals_to_keep = set(dir(builtins)) | {'__name__', '__doc__', '__package__', '__loader__', '__spec__', '__annotations__', '__builtins__', '_pyodide_core'}\n      user_globals = [name for name in globals() if name not in globals_to_keep]\n      for name in user_globals:\n          del globals()[name]\n      del name\n      del user_globals\n    ")},n.getOutput=()=>e.innerText,n.installPackage=window._installPyodidePackage,n}