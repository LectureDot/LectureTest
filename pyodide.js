let pyWorker,pyProcessRoutes,pyProcessTimeouts,nextProcessId=1;export function reset(){pyWorker&&(Object.values(pyProcessTimeouts).forEach(clearTimeout),Object.values(pyProcessRoutes).forEach((e=>e({data:{output:"\nðŸ›‘ Execution interrupted.",done:!0,status:"Execution interrupted."}}))),pyWorker.terminate()),pyWorker=new Worker("pyodideWorker.js"),window.pyWorker=pyWorker,pyProcessRoutes={},pyProcessTimeouts={},pyWorker.ready=new Promise((e=>{pyWorker.readyResolve=e})),pyWorker.onerror=e=>{console.error("An unhandled error occurred in the worker:",e.message)},pyWorker.onmessage=e=>{if(e.data.init)return void pyWorker.readyResolve(!0);const t=e.data.pyId;t in pyProcessRoutes?pyProcessRoutes[t](e):console.error(t,"not found in pyWorkerRoutes.")}}reset(),window.reset=reset;const styleElement=document.createElement("style");function createStdio(e,t,o,r){t.innerHTML="Python kernel busy --\n You may be running python code elsewhere.\nWaiting for kernel...",r.maxTime&&(pyProcessTimeouts[e]=setTimeout((()=>{reset(),t.innerHTML+=`\n Timed out after ${r.maxTime} seconds.`}),1e3*r.maxTime)),pyProcessRoutes[e]=n=>{if(n.data.ready&&(t.innerHTML=""),n.data.output&&(r.maxOutput&&t.innerText.length>r.maxOutput?(t.innerHTML+=`\nðŸ›‘ Execution interrupted.\n Maximum output size reached (${r.maxOutput} characters).`,clearTimeout(pyProcessTimeouts[e]),o&&o("Execution interrupted."),delete pyProcessRoutes[e],delete pyProcessTimeouts[e],reset()):t.innerHTML+=n.data.output.replace(/</g,"&lt;").replace(/>/g,"&gt;")),"input"===n.data.type){const o=document.createElement("span");o.classList.add("input-span"),o.setAttribute("contenteditable","true"),t.appendChild(o),o.focus(),o.addEventListener("keypress",(r=>{"Enter"===r.key&&(r.preventDefault(),o.removeAttribute("contenteditable"),pyWorker.postMessage({pyId:e,type:"INPUT",text:o.innerText}),t.innerHTML+="\n")}))}n.data.done&&(clearTimeout(pyProcessTimeouts[e]),delete pyProcessTimeouts[e],delete pyProcessRoutes[e],o&&o(n.data.status||!0)),t.scrollTop=t.scrollHeight}}styleElement.textContent="\n  .input-span {\n      border: 1px solid #ccc;\n      padding: 1px 0.5em;\n      min-width: 5em;\n      min-height: 1em;\n      display: inline-block;\n      white-space: nowrap;\n      overflow: hidden;\n      vertical-align: bottom;\n  }\n  .error-msg {\n      color: orange;\n  }\n  .warning-msg {\n      color: orange;\n  }\n",document.head.appendChild(styleElement);export const run=async function(e,t,o={}){const r=nextProcessId++;o=Object.assign({addAwaitToEveryInput:!0,filename:"main.py",maxOutput:1e3,maxTime:10},o),await pyWorker.ready;const n=new Promise((n=>{t.innerHTML="",createStdio(r,t,n,o),pyWorker.postMessage({pyId:r,type:"RUN",code:e,options:o})}));return await n};export const unitTest=async function(e,t,o,r=1e3,n=10){return await pyWorker.ready,await new Promise((s=>{const i=nextProcessId++;n&&(pyProcessTimeouts[i]=setTimeout((()=>{reset(),s(`ERROR: Code timed out after ${n} seconds.`)}),1e3*n)),pyProcessRoutes[i]=e=>{e.data.output&&(clearTimeout(pyProcessTimeouts[i]),delete pyProcessTimeouts[i],delete pyProcessRoutes[i],s(e.data.output))},pyWorker.postMessage({pyId:i,type:"UNITTEST",code:e,testInput:t,testCode:o,maxOutput:r})}))};window.run=run,window.unitTest=unitTest;