!async function(){let t,n,e={};const i=new Int8Array(1);i[0]=0;try{importScripts("https://cdn.jsdelivr.net/pyodide/v0.28.2/full/pyodide.js")}catch(t){return console.error("Failed to import pyodide:",t),void self.postMessage({error:"Worker initialization failed: Could not import Pyodide.",details:t.message})}function s(){i[0]=0,self.pythonKernel.runPython("\n      globals_to_keep = {'__name__', '__doc__', '__package__', '__loader__', '__spec__', '__annotations__', '__builtins__', '_pyodide_core'}\n      user_globals = [name for name in globals() if name not in globals_to_keep]\n      for name in user_globals:\n          del globals()[name]\n      del name\n      del user_globals\n    ")}function a(t,n,e){self.postMessage({pyId:t,output:n,type:e})}function o(t){const n=t.split("\n"),e=[n[0]];let i=!1;for(let t of n.slice(1))t.trimLeft().startsWith("File ")&&!t.includes("pyodide")&&(i=!0),i&&e.push(t);return e.join("\n")}t=async function(){self.pythonKernel=await loadPyodide(),self.pythonKernel.setInterruptBuffer(i),self.postMessage({init:!0})}(),self.onmessage=async i=>{await t;const r=i.data.pyId;if(r)if("RUN"===i.data.type)n&&await n,self.postMessage({pyId:r,ready:!0}),n=async function(n,i,l={}){await t,await self.pythonKernel.loadPackagesFromImports(i),s(),self.pythonKernel.setStdout({write:t=>function(t,n,e){const i=String.fromCharCode.apply(null,n);return a(t,i,e),i.length}(n,t)}),self.pythonKernel.globals.set("input",(t=>function(t,n){return a(t,n,"input"),new Promise((n=>{e[t]=n}))}(n,t))),(l.addAwaitToEveryInput??!0)&&function(t){const n={reassignment:/\binput\s*=(?!=)/g,functionArgument:/^\s*def\s+\w+\s*\([^)]*\binput\b[^)]*\)/gm,functionDefinition:/^\s*def\s+input\s*\(/gm,classDefinition:/^\s*class\s+input\s*(?:\(|:)/gm,lambdaArgument:/\blambda\s+\binput\b/g};let e=[];t.match(n.reassignment)&&e.push("Potential `input` function reassignment found.\n Reassigning built-in functions can cause unexpected behavior.");t.match(n.functionArgument)&&e.push("The name `input` is being used as a function argument in a `def` statement.\n This will shadow the built-in `input` function inside the function scope.");t.match(n.functionDefinition)&&e.push("A custom function named `input` is being defined.\n This will overwrite the built-in `input` function.");t.match(n.classDefinition)&&e.push("A custom class named `input` is being defined.\n This will overwrite the built-in `input` function.");t.match(n.lambdaArgument)&&e.push("The name `input` is being used as a parameter in a `lambda` expression.\n This will shadow the built-in `input` function.");return e}(i=function(t){const n=(t=t.replace(/\\\n/g,"")).split("\n");return function(t){const n=/\bawait input\((("(?:[^"\\]|\\.)*")|('(?:[^'\\]|\\.)*')|('''(?:[^']|'[^']|''[^'])*''')|("""(?:[^"]|"[^"]|""[^"])*""")|[^)]*)\)/g;return t.replace(n,((t,n,e,i,s,a)=>`(await input(${n||e||i||s||a}))`))}(t=n.map((t=>t.replace(/\binput\s*\(/g,"await input(").replace(/\bawait\s+await input\(/g,"await input("))).join("\n"))}(i)).forEach((t=>function(t,n){a(t,n+"\n","warning")}(n,"WARNING: "+t)));try{await self.pythonKernel.runPythonAsync(i,{filename:l.filename||"main.py"}),self.pythonKernel.runPython("import sys; sys.stdout.flush()")}catch(t){!function(t,n){a(t,n+"\n","error")}(n,o(t))}return self.pythonKernel.setStdout({write:t=>t.length}),self.pythonKernel.globals.set("input",(t=>{})),!0}(r,i.data.code,i.data.options),await n,self.postMessage({pyId:r,done:!0});else if("UNITTEST"===i.data.type){n&&await n,n=l(i.data.code,i.data.testInput,i.data.testCode,i.data.maxOutput);const t=await n;self.postMessage({pyId:r,output:t,done:!0})}else"INPUT"===i.data.type&&e&&(e[r](i.data.text),delete e[r]);else console.error("No process ID specified.")};const l=async function(t,n,e,a=1e3,l=1){s();var r="";self.pythonKernel.setStdout({write:t=>((r+=String.fromCharCode.apply(null,t)).length>a&&(r+=`\nðŸ›‘ Execution interrupted.\n Maximum output size reached (${a} characters).`,self.pythonKernel.setStdout({write:t=>t.length}),i[0]=2),t.length)}),n=n||"";let u=0;const p=()=>n[u++];self.pythonKernel.setStdin({read:t=>{let n=p();return n?(r+=n,t[0]=n.charCodeAt(0),1):0}}),self.pythonKernel.globals.set("input",(t=>{t&&(r+=t);let n="",e=p();for(;e&&"\n"!=e;)n+=e||"",e=p();return r+=n+"\n",n}));try{await self.pythonKernel.runPythonAsync(`${t}`),e&&await self.pythonKernel.runPythonAsync(`${e}`),self.pythonKernel.runPython("import sys; sys.stdout.flush()")}catch(t){(t=t.toString()).toString().includes("KeyboardInterrupt")||(r+=o(t))}return r}}();