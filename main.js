import{auth,onAuth,signIn,db}from"./firebase.js";import{showQuestions}from"./showQuestions.js";import{lockdown,lockdownStop}from"./lockdown.js";import{popup,confirmPopup}from"./ui/popup.js";import{toast,toastError,toastWarn}from"./ui/toast.js";import{last,el,show,hide,addElementTo,copyToClipboard,currentUrlWithParams,newEl,span,button,input,isDisplayed}from"./ui/common.js";import{quizBuilder}from"./quizbuilder.js";import{checkAnswers,quizGrader}from"./quizgrader.js";import{grid}from"./ui/grid.js";const cUSERS="users",cEXAMS="exams",cSUBMISSIONS="submit",cANSWERS="answ",fFIRST_NAME="fname",fLAST_NAME="lname",fEXAM_LOCKDOWN="lockdown",fEXAM_TITLE="title",fDATETIME="d",fEXAM_DURATION="duration",fPASSCODE_DURATION="cdur",fPASSCODE="c",fEXAM_ID="eid",fSUBMISSION_QUESTION_POINTS="p",fSUBMISSION_QUESTION_ANSWER="a",fSUBMISSION_QUESTION_SECONDS="s",eSTART="s",eLOCKDOWN="l",eLEFT_LOCKDOWN="!",eUNSAVED="?",eFINISHED="f",EVENT_ICONS={[eSTART]:'<i class="fa-solid fa-book-open"></i>',[eLOCKDOWN]:'<i class="fa-solid fa-lock"></i>',[eLEFT_LOCKDOWN]:'</i><i class="fa-solid fa-unlock"></i>',[eUNSAVED]:'<i class="fa-solid fa-triangle-exclamation"></i>',[eFINISHED]:'<i class="fa-solid fa-door-closed"></i>'};var user,userDoc,isDirty;function init(){const e=new URLSearchParams(window.location.search);let n;e.get("exam")&&(el("examId").value=e.get("exam")),setInterval((()=>{n&&window.navigator.onLine?n.close():n||window.navigator.onLine||(n=popup("You are offline.","Sorry, this app will not work while you are offline."))}),500),setTimeout((()=>location.reload()),864e5),displayTime(),setInterval(displayTime,1e4)}var navAllowed=!0;const main=document.querySelector("main");function allowNav(){navAllowed=!0}function disallowNav(){navAllowed=!1}function currentSectionInMain(){return main.children[0].id}function showSectionInMain(e){if(navAllowed){if(window.location.hash.slice(1)===e)return void(currentSectionInMain()!==e&&main.prepend(el(e)||el("home")));window.location.hash=`#${e}`||""}else toast("Navigation not allowed at the moment.")}function navigateBack(){navAllowed&&history.back()}function showError(e,n){console.log("ERROR",e,n),toastError(`<b>${e}</b>\n${n||""}`)}window.onhashchange=function(e){if(navAllowed){let e=el(location.hash.slice(1)||"home");e&&(main.prepend(e),main.scrollTop=0)}else"#_"!==location.hash&&(location.hash="#"+e.oldURL.split("#")[1])};const timeElement=el("infoRight");function displayTime(){timeElement.innerText=(new Date).toLocaleTimeString("en-US",{hour:"2-digit",minute:"2-digit"})}function refreshUserInfo(){if(el("userInfo").innerHTML=`${userDoc.fname||""} ${userDoc.lname||""} (${user.email})`,el("name").textContent=userDoc.fname+" "+userDoc.lname,el("infoLeft").innerHTML="",userDoc.i){const e=el("infoLeft").appendChild(document.createElement("span"));e.textContent="Instructor View",e.className="link",e.addEventListener("click",(()=>showSectionInMain("instructorView")))}dbr.write(`/users/${user.uid}`,{d:dbr.timestamp(),email:user.email,[fFIRST_NAME]:userDoc.fname,[fLAST_NAME]:userDoc.lname})}async function saveUserInfo(e,n){let t={[fFIRST_NAME]:e,[fLAST_NAME]:n},s=await db.updateOne(cUSERS,user.email,t);s.error?showError("Failed to update user profile.",s.error):(Object.assign(userDoc,t),refreshUserInfo(),showSectionInMain("home"))}var currentExam={};async function loadExam(e,n){let t=await db.updateOne(cUSERS,user.email,{[fPASSCODE]:n});t.error?showError("Failed to set passcode.",t.error):(t=await db.getDoc(cEXAMS,e),t.error?t.error.includes("permission")?showError("Permission denied.","Check that the exam id is correct, and check what passcode the instructor currently has enabled for this exam."):showError("Could not load exam.",t.error):(t.instructions&&(el("instructionContent").innerHTML=t.instructions),(currentExam=t).id=e,showSectionInMain("instructions")))}async function recordEvent(e){let n=await dbr.push(`/exams/${currentExam.id}/${user.uid}`,{d:dbr.timestamp(),e:e});n?.error&&console.error("Could not push event to exam db:",e,`(${n.error})`)}function startExamAsStudent(){function e(){recordEvent("s"),isDirty=!0,showSectionInMain("questions"),showQuestions(currentExam,el("questions"),showResultsToStudent),setTimeout(disallowNav,1e3)}currentExam.lockdown?lockdown({onStart:e,onLock:()=>{console.log("locked",new Date),recordEvent("l")},onLeave:()=>{console.log("unlocked",new Date),recordEvent("!")},onCancel:()=>{showSectionInMain("home")},onLeaveTimeExceeded:()=>console.log("Leave time exceeded"),maxUnlock:Math.max(currentExam.lockdown,5)}):e()}async function showResultsToStudent(e,n){const t={};t.email=user.email,t.user=userDoc,t.eid=currentExam.id,t.duration=Date.now()-n,t.d=db.serverTimestamp(),t.answers=e,console.log("Test results:",t);let s=await db.insertOne("submit",null,t);s.error?s.error.includes("permission")?showError("Permission denied.","It may be the case that the exam has expired."):showError("Could not save results.",s.error):(isDirty=void 0,lockdownStop(),allowNav(),recordEvent("f"),showSectionInMain("results"),el("results").innerHTML="\n  <div>\n  <p>You are all done!</p>\n  <p>Your answers have been recorded. ✔️</p>\n  <p>Goodbye.</p>\n  </div>\n  ")}var exams={},answersForExams={},submissions={},users={};async function getUserFromUid(e){return e in users?users[e]:users[e]=(await dbr.get(`users/${e}`))?.val()}async function getAnswers(e,n){if(e in answersForExams)return answersForExams[e];let t=await db.getDoc("answ",n.answ);return t.error?(showError("Could not retrieve answers for exam.",t.error),t):(answersForExams[e]=t,t)}async function findExams(e){let n=await db.find(cEXAMS,db.orderBy("title"),...db.startsWith("title",e));n.error?showError("Failed to search database.",n.error):(exams=n,showExamList())}function showExamList(){const e=el("instructorExamsList");e.innerHTML="";for(let n in exams){const t=n;let s=addElementTo(e),o=exams[n];addElementTo(s,{textContent:n,className:"copy-btn",events:{click:e=>{copyToClipboard(currentUrlWithParams({exam:n})),toast("Exam link copied to clipboard.")}}}),addElementTo(s,{textContent:`${o.title} (${o.questions?.length||0} questions)`}),addElementTo(s,{tag:"i",className:"fa-solid fa-play link",events:{click:e=>setExamPasscode(o,n)}}),addElementTo(s,{tag:"i",className:"fa-solid fa-users-between-lines link",events:{click:e=>showSubmissions(t,o)}}),addElementTo(s,{tag:"i",className:"fa-solid fa-pen-to-square link",events:{click:async e=>{let n={};o.answ&&(n=await getAnswers(t,o),n.error)||(showSectionInMain("instructorExamView"),quizBuilder(el("instructorExamView"),o,n,(e=>saveExam(t,o,n,s)),(e=>{el("instructorExamView").innerHTML="",showSectionInMain("instructorView")})))}}}),addElementTo(s,{tag:"i",className:"fa-solid fa-copy link",events:{click:async e=>{let n=JSON.parse(JSON.stringify(o)),s=await getAnswers(t,o);if(s.error)return;if(s){let e=await db.insertOne("answ",null,s);if(e.error)return void showError("Could not duplicate answers. Did not duplicate exam.",e.error);n.answ=e}n.title+=` copy ${(new Date).toJSON().slice(0,16).replace(/(:|-|T)/g,"")}`;let a=await db.insertOne(cEXAMS,null,n);a.error?showError("Could not duplicate exam.",a.error):(exams[a]=n,showExamList())}}}),addElementTo(s,{tag:"i",className:"fa-solid fa-user-plus link"}),addElementTo(s,{tag:"i",className:"fa-solid fa-trash-can link special",events:{click:async e=>{confirmPopup("Deleting exam","<p>Are you sure you want to delete this exam?</p><h4>Exam deletion may have unintended consequences.</h4>","Delete",(async()=>{if(o.answ){let e=await db.deleteOne("answ",o.answ);if(e?.error)return void showError("Could not delete answers.",e.error);delete answersForExams[t]}let e=await db.deleteOne(cEXAMS,t);e?.error?showError("Could not delete exam.",e.error):(delete exams[t],showExamList())}),"Cancel")}}})}}function setExamPasscode(e,n){popup(e.title,[input({id:"setPasscodeInput",placeholder:"Passcode",style:{display:"block"}}),input({htmlBefore:"Passcode duration: ",id:"setDurationInput",tag:"input",type:"number",value:e.cdur,min:1,max:200,maxlength:5,htmlAfter:" minute(s)"}),input({htmlBefore:"Exam duration: ",id:"setExamDurationInput",tag:"input",type:"number",value:e.duration,min:1,max:1e3,maxlength:5,htmlAfter:" minute(s)"}),input({id:"setLockdownInput",tag:"input",type:"checkbox",checked:e.lockdown,htmlAfter:"Use lockdown mode"})],[newEl({tag:"button",textContent:"Start",events:{click:t=>{showExamPassCode(e,n,el("setPasscodeInput").value,el("setDurationInput").value,el("setExamDurationInput").value,el("setLockdownInput").checked)}}})],"Cancel")}async function showExamPassCode(e,n,t,s,o,a){if(!t)return void toast("Passcode required.");if(!(s=parseFloat(s))||s<1)return void toast("Passcode duration must be at least 1 minute.");if(!(o=parseFloat(s))||o<1)return void toast("Exam duration must be at least 1 minute.");let r={[fDATETIME]:db.serverTimestamp(),[fPASSCODE_DURATION]:s,[fEXAM_DURATION]:o,[fEXAM_LOCKDOWN]:a,[fPASSCODE]:t},i=await db.updateOne(cEXAMS,n,r);if(i.error)return void showError("Could not set passcode for exam.",i.error);Object.assign(e,r);const l=popup(e.title,`Exam ID:<h2>${n}</h2>\n    Passcode:<h2>${t}</h2>\n    <div id="passcodeCountdown"></div>\n    ${e.instructions||""}`,null,"Dismiss"),c=el("passcodeCountdown"),d=6e4*s+Date.now();setTimeout((function e(){if(console.log(d),!isDisplayed(l))return;let n=Math.floor((d-Date.now())/1e3);n<=0?l.close():(c.innerText=`Passcode expires in ${Math.floor(n/60)}:${String(n%60).padStart(2,"0")}`,setTimeout(e,1e3))}),1e3)}async function saveExam(e,n,t,s){let o;if(n.answ){if(o=await db.updateOne("answ",n.answ,t),o.error)return void showError("Could not save answers.",o.error)}else{if(o=await db.insertOne("answ",null,t),o.error)return void showError("Could not save answers.",o.error);n.answ=o}o=await db.updateOne(cEXAMS,e,n),o.error?showError("Could not save exam.",o.error):(console.log(n),console.log(t),exams[e]=n,showExamList())}async function showSubmissions(e,n){let t=await db.find("submit",db.where("eid","==",e));t.error&&showError("Could not load submissions.",t.error),submissions=t;const s=popup("Student submissions","",null,"Dismiss").main,o=[],a=grid([],{className:"submissions-table"},s);if(a.addRow(["Date/time","Email","First Name","Last Name",'<i class="icon-btn fa-solid fa-check"></i>','<i class="icon-btn fa-solid fa-xmark"></i> / <i class="icon-btn fa-solid fa-minus"></i>','<i class="icon-btn fa-solid fa-circle-exclamation"></i>'],{className:"header"}),Object.keys(t).length){let t={};if(n.answ&&(t=await getAnswers(e,n),t.error))return;for(let e in submissions){let s=submissions[e],r=checkAnswers(n,t,s.answers);const i=a.addRow([span({textContent:new Date(1e3*s.d.seconds).toJSON().slice(0,16)}),span({textContent:s.email}),span({textContent:s.user.fname}),span({textContent:s.user.lname}),span({textContent:Object.values(r).filter((e=>!0===e)).length}),span({textContent:Object.values(r).filter((e=>!1===e)).length+" / "+Object.values(r).filter((e=>null===e)).length}),span({textContent:Object.values(r).filter((e=>"check"===e)).length})],{className:"link",events:{click:e=>{console.log(s.answers);let o=popup("Submission","",null,"Dismiss");o.className="large";let a=!1;quizGrader(o.main,n,t,s.answers,(e=>{console.log("Saving submission:"),console.log(e)}),(e=>{a=e})),o.onDismiss=e=>{if(a)return!confirm("Are you sure?")}}}});i._submissionId=e,i._submission=s,i._email=s.email,o.push(i)}}else a.addRow(["No submissions found."]);const r=[],i={};r.push(dbr.onChildAdded(`exams/${e}`,(async(n,t)=>{let s=await getUserFromUid(n);const o=Object.values(t);let l=last(o),c=o.map((e=>EVENT_ICONS[e.e]));c=c.filter(((e,n)=>e!==c[n-1]));let d=(c.length>4?"...":"")+c.slice(-4).join(" ");const u=a.addRow([new Date(l.d).toJSON().slice(0,16),s.email,s.fname,s.lname,span({innerHTML:d,style:{gridColumn:"5 / 8",textAlign:"center"}})],{},1);u._events=Object.values(o),i[s.email]=u,r.push(dbr.onChildAdded(`exams/${e}/${n}`,(async(e,n)=>{o.push(n);let t=o.map((e=>EVENT_ICONS[e.e]));t=t.filter(((e,n)=>e!==t[n-1]));let s=(t.length>4?"...":"")+t.slice(-4).join(" ");u.children[0].innerHTML=new Date(n.d).toJSON().slice(0,16),u.children[4].innerHTML=s})))}))),console.log("listening",`exams/${e}`)}onAuth((async e=>{if(user=e){if(null===(userDoc=await db.getDoc(cUSERS,user.email))){userDoc={};let e=await db.insertOne(cUSERS,user.email,userDoc);if(e.error)return void showError("Could not add user to database.",e.error.code||e.error)}refreshUserInfo(),el("userProfile").innerHTML=`\n    <p>You are signed in as <b>${user.email}</b>.</p>\n    <p><img src='${user.photoURL}'></p>\n    `,userDoc.fname&&userDoc.lname?(el("firstName").value=userDoc.fname,el("lastName").value=userDoc.lname,show("userBackBtn"),showSectionInMain(location.hash.slice(1)||"home")):(hide("userBackBtn"),showSectionInMain("user"))}else showSectionInMain("default")}),(e=>showError("Authentication error.",e))),el("userBackBtn").addEventListener("click",(e=>showSectionInMain("home"))),el("userInfo").addEventListener("click",(e=>showSectionInMain("user"))),el("signInBtn").addEventListener("click",signIn),el("signoutBtn").addEventListener("click",(async e=>{await auth.signOut(),location.reload()})),el("userInfoForm").addEventListener("submit",(async e=>{e.preventDefault(),saveUserInfo(el("firstName").value,el("lastName").value)})),el("examInfoForm").addEventListener("submit",(async e=>{e.preventDefault(),loadExam(el("examId").value,el("examPasscode").value)})),el("examSearchForm").addEventListener("submit",(async e=>{e.preventDefault(),findExams(el("examSearchInput").value)})),el("createNewExamBtn").addEventListener("click",(async e=>{let n=input({placeholder:"Exam title"});confirmPopup("Create new exam",n,"Create exam",(async e=>{if(!n.input.value)return void toastError("Exam title required.");let t={title:n.input.value},s=await db.insertOne(cEXAMS,null,t);s.error?showError("Could not create exam.",s.error):(exams[s]=t,showExamList())}),"Cancel")})),el("proceedBtn").addEventListener("click",startExamAsStudent),window.addEventListener("beforeunload",(e=>{if(isDirty)return e.preventDefault(),recordEvent("?"),isDirty})),document.addEventListener("keyup",(e=>{"PrintScreen"===e.key&&(e.preventDefault(),popup("Screenshots not allowed","","","Dismiss",null,{className:"large"}))})),document.addEventListener("keyup",(e=>{"PrintScreen"===e.key&&(e.preventDefault(),setTimeout((e=>{navigator.clipboard.writeText("")}),100))})),init();