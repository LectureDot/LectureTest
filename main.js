import{onAuth,signIn,signOut,db,dbr}from"./firebase.js";import{cleanUp,showQuestions}from"./showQuestions.js";import{lockdown,lockdownStop}from"./lockdown.js";import{popup,confirmPopup}from"./ui/popup.js";import{toast,toastError,toastSuccess,toastWarn}from"./ui/toast.js";import{getEl,show,hide,copyToClipboard,currentUrlWithParams,newEl,span,button,input,isDisplayed,detectBrowser,getDateTime,isArr,isNum,hideToggle,shallowEquals,removeUndefined,arrSum,download,showMinutes,spinOnce,sleep}from"./ui/common.js";import{quizBuilder}from"./quizbuilder.js";import{checkAnswers,makeGradesheet,quizGrader}from"./quizgrader.js";import{grid}from"./ui/grid.js";import{quizAnalyzer}from"./quizanalyzer.js";import{C,F}from"./schema.js";import{preventCopyPasteAndAutofill,reenableCopyPaste}from"./util/preventCheating.js";import{marked}from"https://cdn.jsdelivr.net/npm/marked/lib/marked.esm.js";const ALLOWED_BROWSERS=["Chrome"],eSTART="s",eLOCKDOWN="l",eLEFT_LOCKDOWN="!",eLOCKDOWN_TIMEOUT="t",eUNSAVED="?",eFINISHED="f",EVENT_ICONS={[eSTART]:'<i class="fa-solid fa-book-open" title="started"></i>',[eLOCKDOWN]:'<i class="fa-solid fa-lock" title="locked"></i>',[eLEFT_LOCKDOWN]:'</i><i class="fa-solid fa-unlock" title="unlocked"></i>',[eUNSAVED]:'<i class="fa-solid fa-triangle-exclamation" title="unsaved"></i>',[eLOCKDOWN_TIMEOUT]:'<i class="fa-solid fa-hourglass-end" title="lock timed out"></i>',[eFINISHED]:'<i class="fa-solid fa-door-closed" title="exam submitted"></i>'};var user,userDoc,isDirty;function init(){const e=new URLSearchParams(window.location.search);let t;e.get("exam")&&(getEl("examId").value=e.get("exam")),ALLOWED_BROWSERS.includes(detectBrowser())||popup("WARNING",`<p>It looks like you are using ${detectBrowser()} as your browser.</p><p>We strongly encourage you to use Chrome instead.</p><p>This application was tested using the Chrome browser only.</p>`,null,"Dismiss"),setInterval((()=>{t&&window.navigator.onLine?(t.close(),t=null):t||window.navigator.onLine||(t=popup("You are offline.","Sorry, this app will not work while you are offline."))}),500),setTimeout((()=>location.reload()),864e5),displayTime(),setInterval(displayTime,1e4)}var navAllowed=!0;const main=document.querySelector("main");function allowNav(){navAllowed=!0}function disallowNav(){navAllowed=!1}function currentSectionInMain(){return main.children[0].id}function showSectionInMain(e){if(navAllowed){if(window.location.hash.slice(1)===e)return void(currentSectionInMain()!==e&&main.prepend(getEl(e)||getEl("home")));window.location.hash=`#${e}`||""}else toast("Navigation not allowed at the moment.")}function navigateBack(){navAllowed&&history.back()}function showError(e,t=""){console.log("ERROR",e,t),toastError(`<b>${e}</b>\n${t||""}`)}window.onhashchange=function(e){if(navAllowed){let e=getEl(location.hash.slice(1)||"home");e&&(main.prepend(e),main.scrollTop=0,main.focus())}else"#_"!==location.hash&&(location.hash="#"+e.oldURL.split("#")[1])};const timeElement=getEl("infoRight");function displayTime(){timeElement.innerText=(new Date).toLocaleTimeString("en-US",{hour:"2-digit",minute:"2-digit"})}function refreshUserInfo(){if(localStorage.email=user.email,getEl("userInfo").innerHTML=`${userDoc[F.FIRST_NAME]||""} ${userDoc[F.LAST_NAME]||""} (${user.email})`,getEl("name").textContent=userDoc[F.FIRST_NAME]+" "+userDoc[F.LAST_NAME],getEl("infoLeft").innerHTML="",userDoc[F.INSTRUCTOR]){const e=getEl("infoLeft").appendChild(document.createElement("span"));e.textContent="Instructor View",e.className="link",e.addEventListener("click",(()=>showSectionInMain("instructorView")))}dbr.write(`/users/${user.uid}`,{d:dbr.timestamp(),email:user.email,[F.FIRST_NAME]:userDoc[F.FIRST_NAME],[F.LAST_NAME]:userDoc[F.LAST_NAME]})}async function saveUserInfo(e,t){let n={[F.FIRST_NAME]:e,[F.LAST_NAME]:t},o=await db.updateOne(C.USERS,user.email,n);o.error?showError("Failed to update user profile.",o.error):(Object.assign(userDoc,n),refreshUserInfo(),showSectionInMain("home"))}var currentExam={},events=[];async function loadExam(e,t){let n=await db.updateOne(C.USERS,user.email,{[F.PASSCODE]:t});if(n.error)return void showError("Failed to set passcode.",n.error);if(n=await db.getDoc(C.EXAMS,e),n.error)return void(n.error.includes("permission")?showError("Permission denied.","Check that the exam id is correct, and check what passcode the instructor currently has enabled for this exam."):showError("Could not load exam.",n.error));(currentExam=n).id=e,getEl("instructionExamTitle").innerHTML=currentExam[F.EXAM_TITLE],currentExam[F.EXAM_DESCRIPTION]&&(getEl("instructionDescription").innerHTML=marked.parse(currentExam[F.EXAM_DESCRIPTION].replace(/\n/g,"  \n")));const o=getEl("ldc");hide(o),currentExam[F.EXAM_LOCKDOWN]&&(getEl("instructionDescription").innerHTML+='<p>This exam will use full-screen and will <span id="ldcLink">prevent</span> you from leaving the window.</p>',getEl("ldcLink").addEventListener("click",(e=>hideToggle(o))),o.addEventListener("input",(e=>{currentExam.ldcInput=o.value}))),showSectionInMain("instructions")}async function recordEvent(e){let t=await dbr.push(`/exams/${currentExam.id}/${user.uid}`,{d:dbr.timestamp(),e:e});t?.error&&console.error("Could not push event to exam db:",e,`(${t.error})`)}function startExamAsStudent(){const e={};var t;function n(){t=Date.now(),recordEvent("s"),isDirty=!0,showSectionInMain("questions"),getEl("examTitle").innerHTML=currentExam[F.EXAM_TITLE],getEl("examInstructions").innerHTML=marked.parse(currentExam[F.EXAM_INSTRUCTIONS].replace(/\n/g,"  \n")),showQuestions(currentExam,e,getEl("questions"),showResultsToStudent),setTimeout(preventCopyPasteAndAutofill,1e3),setTimeout(disallowNav,1e3)}events=[],!currentExam[F.EXAM_LOCKDOWN]||currentExam[F.EXAM_LOCKDOWN_DISABLE_CODE]&&currentExam[F.EXAM_LOCKDOWN_DISABLE_CODE]===currentExam.ldcInput?n():lockdown({onStart:n,onLock:()=>{console.log("locked",new Date),recordEvent("l"),events.push(Date.now()-t,"l")},onLeave:()=>{console.log("unlocked",new Date),recordEvent("!"),events.push(Date.now()-t,"!")},onCancel:()=>{showSectionInMain("home")},onLeaveTimeExceeded:()=>{if(console.log("Leave time exceeded"),recordEvent("t"),events.push(Date.now()-t,"t"),(Date.now()-t)/1e3<Math.max(currentExam[F.EXAM_LOCKDOWN],5)+5)return isDirty=void 0,lockdownStop(),void allowNav();cleanUp(e,currentExam),console.log(e),showResultsToStudent(e,t)},maxUnlock:Math.max(currentExam[F.EXAM_LOCKDOWN],5),disablePasscode:currentExam[F.EXAM_LOCKDOWN_DISABLE_CODE]})}async function showResultsToStudent(e,t){const n={};n.email=user.email,n[F.FIRST_NAME]=userDoc[F.FIRST_NAME],n[F.LAST_NAME]=userDoc[F.LAST_NAME],n[F.EXAM_ID]=currentExam.id,n[F.EXAM_DURATION]=Date.now()-t,n[F.DATETIME]=db.serverTimestamp(),events?.length&&(n[F.SUBMISSION_EVENTS]=events),n.answers=e;let o=await db.insertOne(C.SUBMISSIONS,null,n);if(!o.error)return isDirty=void 0,lockdownStop(),allowNav(),reenableCopyPaste(),recordEvent("f"),showSectionInMain("results"),getEl("results").innerHTML="\n  <div>\n  <p>You are all done!</p>\n  <p>Your answers have been recorded. ✔️</p>\n  <p>Goodbye.</p>\n  </div>\n  ",!0;o.error.includes("permission")?showError("Permission denied.","It may be the case that the exam has expired."):showError("Could not save answers.",o.error)}var exams={},answersForExams={},users={},pageIndx={},submissionPages={};async function getUserFromUid(e){return e in users?users[e]:users[e]=(await dbr.get(`users/${e}`))?.val()}async function findExams(e,t){let n=await db.find(C.EXAMS,[["orderBy",F.EXAM_TITLE],[F.INSTRUCTOR,"array-contains",user.email],[F.EXAM_TITLE,"startsWith",e]],!t);n.error?showError("Failed to search database.",n.error):(delete n._,exams=n,showExamList())}function showExamList(){const e=getEl("instructorExamsList");e.innerHTML="",grid(["Exam link","Exam title",span({style:{gridColumn:"span 7"}})],Object.entries(exams).map((([e,t])=>[span({textContent:e,className:"copy-btn",events:{click:t=>{copyToClipboard(currentUrlWithParams({exam:e})),toast("Exam link copied to clipboard.")}}}),span({textContent:`${t.title} (${t.questions?.length||0} questions)`}),span({tag:"i",className:"fa-solid fa-play link",title:"Initialize exam",events:{click:n=>setExamPasscode(t,e)}}),span({tag:"i",className:"fa-solid fa-users-between-lines link",title:"Live view",events:{click:n=>showLiveSubmissions(e,t)}}),span({tag:"i",className:"fa-solid fa-a link",title:"Grading",events:{click:n=>showSubmissions(e,t)}}),span({tag:"i",className:"fa-solid fa-pen-to-square link",title:"Edit exam",events:{click:async n=>{var o={};t[C.ANSWERS]&&(o=await db.getDoc(C.ANSWERS,t[C.ANSWERS],!0)||{}).error?showError("Could not retrieve answers for exam.",o.error):(console.log(o),showSectionInMain("instructorExamView"),quizBuilder(getEl("instructorExamView"),t,o,((t,n)=>saveExam(e,t,n)),(e=>{getEl("instructorExamView").innerHTML="",showSectionInMain("instructorView")})))}}}),span({tag:"i",className:"fa-solid fa-copy link",title:"Duplicate exam",events:{click:async e=>{let n=JSON.parse(JSON.stringify(t)),o=await db.getDoc(C.ANSWERS,t[C.ANSWERS],!0);if(o.error)return void showError("Could not retrieve answers for exam.",o.error);if(o){let e=await db.insertOne(C.ANSWERS,null,o);if(e.error)return void showError("Could not duplicate answers. Did not duplicate exam.",e.error);n[C.ANSWERS]=e}n.title+=` copy ${(new Date).toJSON().slice(0,16).replace(/(:|-|T)/g,"")}`;let r=await db.insertOne(C.EXAMS,null,n);r.error?showError("Could not duplicate exam.",r.error):(exams[r]=n,showExamList())}}}),span({tag:"i",className:"fa-solid fa-user-plus link",title:"Share exam"}),span({tag:"i",className:"fa-solid fa-trash-can link special",title:"Delete exam",events:{click:async n=>{confirmPopup("Deleting exam","<p>Are you sure you want to delete this exam?</p><h4>Exam deletion may have unintended consequences.</h4>","Delete",(async()=>{if(t[C.ANSWERS]){let n=await db.deleteOne(C.ANSWERS,t[C.ANSWERS]);if(n?.error)return void showError("Could not delete answers.",n.error);delete answersForExams[e]}let n=await db.deleteOne(C.EXAMS,e);n?.error?showError("Could not delete exam.",n.error):(delete exams[e],showExamList())}),"Cancel")}}})])),{},e)}function setExamPasscode(e,t){const n=popup(e.title,[input({id:"setPasscodeInput",placeholder:"Passcode",style:{display:"block"}}),input({htmlBefore:"Passcode duration: ",id:"setDurationInput",tag:"input",type:"number",value:e[F.PASSCODE_DURATION],min:1,max:200,maxlength:5,htmlAfter:" minute(s)"}),input({htmlBefore:"Exam duration: ",id:"setExamDurationInput",tag:"input",type:"number",value:e[F.EXAM_DURATION],min:1,max:1e3,maxlength:5,htmlAfter:" minute(s)"})],[newEl({tag:"button",textContent:"Start",events:{click:n=>{showExamPassCode(e,t,getEl("setPasscodeInput").value,getEl("setDurationInput").value,getEl("setExamDurationInput").value,getEl("setLockdownInput").checked,getEl("setLockdownTimeoutInput")?.value,getEl("setLockdownPasscode")?.value)}}})],"Cancel"),o=input({htmlBefore:"Lockdown timeout: ",id:"setLockdownTimeoutInput",type:"number",min:5,max:1e3,step:1,maxlength:5,value:e[F.EXAM_LOCKDOWN]||10,htmlAfter:"seconds"}),r=input({id:"setLockdownPasscode",tag:"input",type:"password",value:e[F.EXAM_LOCKDOWN_DISABLE_CODE],htmlBefore:"Lockdown passcode",autocomplete:"off",size:6});input({id:"setLockdownInput",tag:"input",type:"checkbox",checked:e[F.EXAM_LOCKDOWN],htmlAfter:"Use lockdown mode",events:{change:e=>{e.target.checked?(n.main.appendChild(o),n.main.appendChild(r)):(o.remove(),r.remove())}}},n.main),e[F.EXAM_LOCKDOWN]&&(n.main.appendChild(o),n.main.appendChild(r))}async function showExamPassCode(e,t,n,o,r,s,a,i){if(!n)return void toast("Passcode required.");if(!(o=parseFloat(o))||o<1)return void toast("Passcode duration must be at least 1 minute.");if(!(r=parseFloat(r))||r<1)return void toast("Exam duration must be at least 1 minute.");if(s&&(!(a=parseFloat(a))||a<5))return void toast("Lockdown timeout must be at least 5 seconds.");let l={[F.DATETIME]:db.serverTimestamp(),[F.PASSCODE_DURATION]:o,[F.EXAM_DURATION]:r,[F.EXAM_LOCKDOWN]:s?a:null,[F.PASSCODE]:n};i&&(l[F.EXAM_LOCKDOWN_DISABLE_CODE]=i);let c=await db.updateOne(C.EXAMS,t,l);if(c.error)return void showError("Could not set passcode for exam.",c.error);Object.assign(e,l);const d=popup(e.title,`Exam ID:<h2>${t}</h2>\n    Passcode:<h2>${n}</h2>\n    <div id="passcodeCountdown"></div>`,null,"Dismiss"),u=6e4*o+Date.now();setTimeout((function e(){if(!isDisplayed(d))return;let t=u-Date.now();t<=0?d.close():(getEl("passcodeCountdown").innerText=`Passcode expires in ${showMinutes(t)}`,setTimeout(e,1e3))}),10)}async function saveExam(e,t,n){let o;if(t[C.ANSWERS]){if(o=await db.updateOne(C.ANSWERS,t[C.ANSWERS],n),o.error)return void showError("Could not save answers.",o.error)}else{if(o=await db.insertOne(C.ANSWERS,null,n),o.error)return void showError("Could not save answers.",o.error);t[C.ANSWERS]=o}answersForExams[e]=n,o=await db.updateOne(C.EXAMS,e,t),o.error?showError("Could not save exam.",o.error):(console.log(t),console.log(n),exams[e]=t,showExamList(),toastSuccess("Exam saved."))}async function showSubmissions(e,t){
//!TODO: if it's not ordered, check SELECT to ensure correct examQuestionCount
const n=t[F.EXAM_QUESTIONS].length;pageIndx[e]||(pageIndx[e]=0),submissionPages[e]||(submissionPages[e]=[]);const o=button({innerHTML:'<i class="fa-solid fa-download"></i>'}),r=button({innerHTML:'<i class="fa-solid fa-rotate"></i>',events:{click:()=>{spinOnce(r.children[0]),c(!0)}}});let s=popup("Student submissions","",[r,o,button({innerHTML:'<i class="fa-solid fa-chart-pie"></i>',events:{click:async()=>{const n=popup(`Test Analytics for ${t.title}`,null,null,"Dismiss",null,{className:"large"}),o=await db.getDoc(C.ANSWERS,t[C.ANSWERS],!0);if(o?.error)return void showError("Could not get answers.",o.error);const r=await db.find(C.SUBMISSIONS,[F.EXAM_ID,"==",e],!0);if(r?.error)return void showError("Could not get submissions.",r.error);const s=await db.getDocsByIds(C.GRADES,Object.keys(r),!0);s?.error?showError("Could not get gradesheets.",s.error):quizAnalyzer(n.main,t,o,r,s)}}})],"Dismiss");const a=span({textContent:t.title},s.main),i=grid(["Date/time","Duration","Email","First Name","Last Name",'<i class="fa-solid fa-lock-open"></i>','<i class="fa-solid fa-minus"></i>','<i class="fa-solid fa-circle-exclamation"></i>',"Points","Grade"],[],{className:"submissions-table"},s.main);function l(e,o,r,s,a,i){let l=Object.values(a).filter((e=>isNum(e))),c=arrSum(l),d=arrSum(Object.values(t[F.EXAM_QUESTIONS]).map((e=>e.points)));e.textContent=c.toFixed(1),o.textContent=(100*c/d).toFixed(1),e.className=l.length<t[F.EXAM_QUESTIONS].length?"purple":"",r.textContent=n-l.length,s.textContent=n-Object.values(i.answers).map((e=>e.a)).filter((e=>e)).length}async function c(o){let r,s;if(i.clearDataRows(),t[C.ANSWERS]&&(r=await db.getDoc(C.ANSWERS,t[C.ANSWERS],!o)||{},r?.error))return void showError("Could not retrieve answers for exam.",r.error);if(s=await db.find(C.SUBMISSIONS,[F.EXAM_ID,"==",e],!o),s?.error)return void showError("Could not get submissions.",s.error);if(!s)return;submissionPages[e][pageIndx[e]]=s;let d=s._?.t?` as of ${getDateTime(s._.t," ")}`:"";a.innerHTML=`${t.title}<br><small>${Object.keys(s).length-1} submissions${d}</small> `,span({innerHTML:'<i class="fa-solid fa-rotate"></i>',onclick:e=>{spinOnce(e.target),c(!0)}},a);let u,m=[];for(let h in s){if("_"===h)continue;const f=s[h];if(f.gradeSheet=await db.getDoc(C.GRADES,h,!o),f.gradeSheet?.error)return void showError("Could not get grade sheet.",f.gradeSheet.error);const S=span(),w=span(),g=span(),v=span();if(f.gradeSheet){if(o&&Object.keys(f.gradeSheet).filter((e=>"_"!==e)).length<n){console.log("checking gradesheet for",f.email);let x=await makeGradesheet(t,r,f);if(!shallowEquals(f.gradeSheet,x,["_"])){console.log("gradesheet changed"),console.log("new:",x),console.log("old:",f.gradeSheet),f.gradeSheet=x;let T=await db.updateOne(C.GRADES,h,f.gradeSheet);T?.error&&(m.push(f[F.EMAIL]),u=T.error)}}}else{console.log("making gradesheet for",f.email),f.gradeSheet=await makeGradesheet(t,r,f),console.log(f.gradeSheet);let D=await db.insertOne(C.GRADES,h,f.gradeSheet);D?.error&&(m.push(f[F.EMAIL]),u=D.error)}l(S,w,v,g,f.gradeSheet,f);const A=i.addRow([getDateTime(1e3*f.d.seconds," ",1),showMinutes(f[F.EXAM_DURATION]),f[F.EMAIL],f[F.FIRST_NAME]||f?.user[F.FIRST_NAME]||"",f[F.LAST_NAME]||f?.user[F.LAST_NAME]||"",(parseLockoutTime(unflattenEventArray(f[F.SUBMISSION_EVENTS]))/1e3).toFixed(1),g,v,S,w],{className:"link",events:{click:p}},1);async function E(e){removeUndefined(e);if(!shallowEquals(f.gradeSheet,e)){f.gradeSheet=e;let t=await db.insertOne(C.GRADES,h,f.gradeSheet);if(t?.error)return void showError("Could not update grades",t.error);l(S,w,v,g,f.gradeSheet,f),toastSuccess("Gradesheet saved.")}else toast("No changes made to the gradesheet.")}async function p(){const e={...f.gradeSheet};let n=[...i.querySelectorAll(".link")],o=n.indexOf(A),s=popup(`Submission for ${f[F.FIRST_NAME]||""} ${f[F.LAST_NAME]||""} ${f.email} (${o+1} of ${n.length}) <small>${h}</small>`,"",[button({innerHTML:'<i class="fa-solid fa-left-long"></i>',disabled:0==o||null,events:{click:()=>{o>0?(s.forceClose(),n[o-1].click()):toast("No more submissions.")}}}),button({innerHTML:'<i class="fa-solid fa-right-long"></i>',disabled:o==n.length-1||null,events:{click:()=>{o<n.length-1?(s.forceClose(),n[o+1].click()):toast("No more submissions.")}}}),button({textContent:"Save",events:{click:()=>{E(e),s.forceClose()}}}),button({innerHTML:'Save <i class="fa-solid fa-right-long"></i>',events:{click:()=>{E(e),s.forceClose(),o<n.length-1?n[o+1].click():n[0].click()}}}),button({innerHTML:'<i class="fa-solid fa-trash"></i>',className:"special",events:{click:()=>{confirmPopup("Delete this student submission","<p>Are you sure you want to delete this student submission?</p><p>This action cannot be undone</p>","Delete forever",(async()=>{let e=await db.deleteOne(C.SUBMISSIONS,h);e?.error?showError("Could not delete.",e.error):(A.remove(),s.forceClose())}),"Cancel")}}})],"Dismiss",(()=>{removeUndefined(e);if(!shallowEquals(f.gradeSheet,e))return confirmPopup("Unsaved grades","There are grades that have changed.","Exit without saving",(()=>{s.forceClose()}),"Cancel"),!0}),{className:"large"});quizGrader(s.main,t,r,f,e)}}i.sort(1,!1),m.length&&showError("Could not save grades",`${u} error for the following: ${m.join(" ")}`)}o.addEventListener("click",(()=>{download("grades.csv",i.getCSV())})),window.t=i,c()}async function showLiveSubmissions(e,t){var n;const o=popup("Student submissions",`${t.title}`,null,"Dismiss",(e=>{n instanceof Function&&n()})).main,r=grid(["Date/time","Email","First Name","Last Name","Status",'<i class="fa-solid fa-lock-open"></i>'],[],{className:"submissions-live"},o),s={},a={},i={};n=dbr.twoLevelPushListener(`exams/${e}`,(async e=>{let t=await getUserFromUid(e);s[e]=r.addRow(["",t.email,t[F.FIRST_NAME],t[F.LAST_NAME],"",""],{},1),a[e]=[]}),(async(e,t,n)=>{for(clearTimeout(i[e]);!s[e];)await sleep(10);a[e].push(n),i[e]=setTimeout((()=>{s[e].children[0].innerHTML=getDateTime(n[F.DATETIME]," "),s[e].children[4].innerHTML=EVENT_ICONS[n.e],s[e].children[5].innerHTML=(parseLockoutTime(a[e])/1e3).toFixed(1),r.sort(0,!1)}),100)}))}function unflattenEventArray(e){if(!isArr(e))return[];let t=[],n={};for(let o of e)n.d?(n.e=o,t.push(n),n={}):n.d=o;return t}function parseLockoutTime(e){if(!isArr(e))return 0;let t=0,n=0;e.sort(((e,t)=>e[F.DATETIME]>t[F.DATETIME]?1:-1));for(let o of e)"s"===o.e?t=n=0:"!"===o.e?n=o.d:"l"===o.e&&(t+=o.d-n);return t}onAuth((async e=>{if(user=e){if(null===(userDoc=await db.getDoc(C.USERS,user.email,!0))){userDoc={};let e=await db.insertOne(C.USERS,user.email,userDoc);if(e.error)return void showError("Could not add user to database.",e.error.code||e.error)}refreshUserInfo(),getEl("userProfile").innerHTML=`\n    <p>You are signed in as <b>${user.email}</b>.</p>\n    <p><img src='${user.photoURL}'></p>\n    `,userDoc[F.FIRST_NAME]&&userDoc[F.LAST_NAME]?(getEl("firstName").value=userDoc[F.FIRST_NAME],getEl("lastName").value=userDoc[F.LAST_NAME],show(getEl("userBackBtn")),showSectionInMain("#instructorView"===location.hash?"instructorView":"home")):(hide(getEl("userBackBtn")),showSectionInMain("user"))}else showSectionInMain("default")}),(e=>showError("Authentication error.",e))),getEl("userBackBtn").addEventListener("click",(e=>navigateBack())),getEl("userInfo").addEventListener("click",(e=>showSectionInMain("user"))),getEl("signInBtn").addEventListener("click",signIn),getEl("signoutBtn").addEventListener("click",(async e=>{await signOut(),location.reload()})),getEl("userInfoForm").addEventListener("submit",(async e=>{e.preventDefault(),saveUserInfo(getEl("firstName").value,getEl("lastName").value)})),getEl("examInfoForm").addEventListener("submit",(async e=>{e.preventDefault(),loadExam(getEl("examId").value,getEl("examPasscode").value)})),getEl("examSearchForm").addEventListener("submit",(async e=>{e.preventDefault(),findExams(getEl("examSearchInput").value)})),getEl("reloadExamsBtn").addEventListener("click",(async e=>{e.preventDefault(),spinOnce(getEl("reloadExamsBtn").children[0]),findExams(getEl("examSearchInput").value,!0)})),getEl("createNewExamBtn").addEventListener("click",(async e=>{let t=input({placeholder:"Exam title"});confirmPopup("Create new exam",t,"Create exam",(async e=>{if(!t.input.value)return void toastError("Exam title required.");let n={[F.EXAM_TITLE]:t.input.value,[F.INSTRUCTOR]:[user.email]},o=await db.insertOne(C.EXAMS,null,n);o.error?showError("Could not create exam.",o.error):(exams[o]=n,showExamList())}),"Cancel")})),getEl("proceedBtn").addEventListener("click",startExamAsStudent),window.addEventListener("beforeunload",(e=>{if(isDirty)return e.preventDefault(),recordEvent("?"),isDirty})),document.addEventListener("keyup",(e=>{"PrintScreen"===e.key&&(e.preventDefault(),popup("Screenshots not allowed","Sorry, screenshots are not allowed.","","Dismiss",null,{className:"large"}))})),window.addEventListener("contextmenu",(e=>{if(!userDoc[F.INSTRUCTOR])return e.preventDefault(),!1})),init();